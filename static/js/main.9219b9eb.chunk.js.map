{"version":3,"sources":["state/action-types/index.tsx","state/action-creators/index.tsx","state/reducer/bankReducer.tsx","state/reducer/index.tsx","state/store.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","depositMoney","mount","dispatch","type","DEPOSIT","payload","withdrawMoney","WITHDRAW","bankrupt","BANKRUPT","reducer","state","action","reducers","combineReducers","bank","bankReducer","store","createStore","applyMiddleware","thunk","App","useDispatch","bindActionCreators","actionCreators","amount","useSelector","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAAYA,E,wDAAAA,K,kBAAAA,E,oBAAAA,E,qBAAAA,M,KCIL,IAAMC,EAAe,SAACC,GACzB,OAAO,SAACC,GACJA,EAAS,CACLC,KAAMJ,EAAWK,QACjBC,QAASJ,MAKRK,EAAgB,SAACL,GAC1B,OAAO,SAACC,GACJA,EAAS,CACLC,KAAMJ,EAAWQ,SACjBF,QAASJ,MAKRO,EAAW,WACpB,OAAO,SAACN,GACJA,EAAS,CACLC,KAAMJ,EAAWU,aCJdC,EAhBC,WAAmD,IAAlDC,EAAiD,uDAF7C,EAE0BC,EAAmB,uCAC9D,OAAQA,EAAOT,MACX,KAAKJ,EAAWK,QACZ,OAAOO,EAAQC,EAAOP,QAE1B,KAAKN,EAAWQ,SACZ,OAAOI,EAAQC,EAAOP,QAE1B,KAAKN,EAAWU,SACZ,OAAO,EAEX,QACI,OAAOE,ICVJE,EAJEC,YAAgB,CAC7BC,KAAMC,I,OCCGC,EAAQC,YACjBL,EACA,GACAM,YAAgBC,M,eCeLC,MAlBf,WAEE,IAAMnB,EAAWoB,cAEjB,EAAkDC,YAAmBC,EAAgBtB,GAA7EF,EAAR,EAAQA,aAAcM,EAAtB,EAAsBA,cAAeE,EAArC,EAAqCA,SAE/BiB,EAASC,aAAY,SAACf,GAAD,OAAkBA,EAAMI,QAEnD,OACE,sBAAKY,UAAU,MAAf,UACE,6BAAKF,IACL,wBAAQG,QAAS,kBAAM5B,EAAa,MAApC,qBACA,wBAAQ4B,QAAS,kBAAMtB,EAAc,MAArC,sBACA,wBAAQsB,QAAS,kBAAMpB,KAAvB,0BCJSqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUvB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJwB,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.9219b9eb.chunk.js","sourcesContent":["export enum ActionType {\r\n    DEPOSIT = \"deposit\",\r\n    WITHDRAW = \"withdraw\",\r\n    BANKRUPT = \"bankrupt\"\r\n}","import { ActionType } from \"../action-types\";\r\nimport { Action } from \"../actions\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nexport const depositMoney = (mount: number) => {\r\n    return (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type: ActionType.DEPOSIT,\r\n            payload: mount\r\n        })\r\n    }\r\n}\r\n\r\nexport const withdrawMoney = (mount: number) => {\r\n    return (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type: ActionType.WITHDRAW,\r\n            payload: mount\r\n        })\r\n    }\r\n}\r\n\r\nexport const bankrupt = () => {\r\n    return (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type: ActionType.BANKRUPT,\r\n        })\r\n    }\r\n}","import { Action } from \"../actions\";\r\nimport { ActionType } from \"../action-types\";\r\n\r\nconst initialState = 0\r\n\r\nconst reducer = (state: number = initialState, action: Action) => {\r\n    switch (action.type) {\r\n        case ActionType.DEPOSIT:\r\n            return state + action.payload\r\n\r\n        case ActionType.WITHDRAW:\r\n            return state - action.payload\r\n\r\n        case ActionType.BANKRUPT:\r\n            return 0\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers } from 'redux';\r\nimport bankReducer from './bankReducer';\r\n\r\nconst reducers = combineReducers({\r\n    bank: bankReducer\r\n})\r\n\r\nexport default reducers;\r\n\r\nexport type State = ReturnType<typeof reducers>","import { createStore, applyMiddleware } from \"redux\";\r\nimport reducers from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    {},\r\n    applyMiddleware(thunk)\r\n)","import { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators, State } from './state';\nimport './App.css';\n\nfunction App() {\n\n  const dispatch = useDispatch();\n\n  const { depositMoney, withdrawMoney, bankrupt } = bindActionCreators(actionCreators, dispatch);\n\n  const amount = useSelector((state: State) => state.bank);\n\n  return (\n    <div className=\"App\">\n      <h1>{amount}</h1>\n      <button onClick={() => depositMoney(1000)}>deposit</button>\n      <button onClick={() => withdrawMoney(500)}>withdraw</button>\n      <button onClick={() => bankrupt()}>bankrupt</button>\n    </div>\n  );\n}\n\nexport default App;\n\n// import * as actionCreator from './action-creators';\n// import *  from './store';","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();"],"sourceRoot":""}